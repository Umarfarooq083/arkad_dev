{"version":3,"sources":["pages/auth/AuthWrapper.tsx","pages/auth/ResetPassword/ResetPage.tsx"],"names":["AuthWrapper","children","style","padding","backgroundColor","Box","sx","flex","display","flexDirection","justifyContent","alignItems","Card","maxWidth","minHeight","xs","sm","width","overflow","position","lg","ResetPassword","dispatch","useDispatch","token","useSelector","state","auth","resetPasswordToken","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","ResetPasswordSchema","Yup","shape","password","required","oneOf","confirmPassword","resetPasswordFormik","useFormik","initialValues","showPasswordToken","validationSchema","onSubmit","values","a","console","log","resetPassword","mb","Typography","component","fontWeight","Fonts","BOLD","fontSize","variant","color","theme","palette","text","primary","SEMI_BOLD","xl","textAlign","noValidate","autoComplete","handleSubmit","TextField","name","fullWidth","type","placeholder","label","value","onChange","e","setFieldValue","target","InputProps","endAdornment","InputAdornment","IconButton","onClick","edge","icon","touched","errors","marginTop","Button","minWidth","REGULAR","textTransform","AppInfoView"],"mappings":"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","file":"static/js/18.50930fff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Box from \"@mui/material/Box\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { Fonts } from \"../../shared/constants/AppEnums\";\r\n\r\ninterface AuthWrapperProps {\r\n  children: any;\r\n}\r\n\r\nconst AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {\r\n  return (\r\n    <>\r\n    <div style={{padding:'0px', backgroundColor:'yellow'}}>\r\n    <Box\r\n    style={{backgroundColor:\"pink\"}}\r\n      sx={{\r\n        flex: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          maxWidth: 600,\r\n          minHeight: { xs: 320, sm: 450 },\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          position: \"relative\",\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: { xs: \"100%\", sm: \"100%\", lg: \"100%\" },\r\n            padding: { xs: 5, lg: 10 },\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n     \r\n      </Card>\r\n    </Box>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthWrapper;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport * as Yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { Fonts } from \"../../../shared/constants/AppEnums\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AppInfoView from \"../../../@crema/core/AppInfoView\";\r\nimport AuthWrapper from \"../AuthWrapper\";\r\nimport { InputAdornment, IconButton } from \"@mui/material\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { TextField } from \"@mui/material\";\r\nimport {resetPassword} from \"../../../redux/auth/actions\"\r\n\r\nconst ResetPassword = () => {\r\n  const dispatch = useDispatch();\r\n  const token = useSelector((state: any) => state.auth.resetPasswordToken);\r\n  const [showPassword, setShowPassword] = useState(\"password\");\r\n  const changePasswordState = () => {\r\n    if (showPassword === \"password\") {\r\n      setShowPassword(\"text\");\r\n    } else {\r\n      setShowPassword(\"password\");\r\n    }\r\n  };\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(\"password\");\r\n  const changeConfirmPasswordState = () => {\r\n    if (showConfirmPassword === \"password\") {\r\n      setShowConfirmPassword(\"text\");\r\n    } else {\r\n      setShowConfirmPassword(\"password\");\r\n    }\r\n  };\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    password: Yup.string().required(\"Password is required\")\r\n    .oneOf([Yup.ref('confirmPassword'), null], 'Passwords must match'),\r\n    confirmPassword: Yup.string()\r\n    .required(\"Confirm Password is required\")\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n  });\r\n\r\n  const resetPasswordFormik = useFormik({\r\n    initialValues: {\r\n      password: \"\", \r\n      confirmPassword: \"\",\r\n      showPasswordToken:\"\" \r\n    },\r\n    validationSchema: ResetPasswordSchema,\r\n    onSubmit: async (values) => {   \r\n      console.log(\"formik values\",values)\r\n      await dispatch(\r\n        resetPassword({\r\n          password: values.password, \r\n          confirmPassword: values.confirmPassword, \r\n          token: token, \r\n        })\r\n      );\r\n    },\r\n  });\r\n  \r\n\r\n  return (\r\n    <AuthWrapper>\r\n      <Box sx={{ width: \"100%\" }}>\r\n        <Box\r\n          sx={{\r\n            mb: 5,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n           <Typography\r\n              component=\"h2\"\r\n              sx={{\r\n                fontWeight: Fonts.BOLD,\r\n                fontSize: 30,\r\n                mb: 4,\r\n              }}\r\n            >\r\n              Arkad\r\n            </Typography>\r\n\r\n        </Box>\r\n        <Typography\r\n          variant=\"h2\"\r\n          component=\"h2\"\r\n          sx={{\r\n            mb: 1.5,\r\n            color: (theme) => theme.palette.text.primary,\r\n            fontWeight: Fonts.SEMI_BOLD,\r\n            fontSize: { xs: 14, xl: 16 },\r\n          }}\r\n        >\r\n         Reset Password\r\n        </Typography>\r\n\r\n        <form\r\n          style={{ textAlign: \"left\" }}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={resetPasswordFormik.handleSubmit}\r\n        >\r\n          <Box sx={{ mb: { xs: 5, xl: 8 } }}>\r\n          \r\n          </Box>\r\n\r\n          <Box sx={{ mb: { xs: 3, xl: 4 } }}>\r\n            <TextField\r\n              name=\"password\"\r\n              fullWidth\r\n              type={showPassword}\r\n              placeholder=\"password\"\r\n              label=\"Password\"\r\n              value={resetPasswordFormik.values.password}\r\n              onChange={(e: any) => {\r\n                resetPasswordFormik.setFieldValue(\"password\", e.target.value);\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={changePasswordState} edge=\"end\">\r\n                      <Icon\r\n                       \r\n                        icon={showPassword == \"text\" ? \"eva:eye-fill\" : \"eva:eye-off-fill\"}\r\n                      />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            {resetPasswordFormik.touched.password && resetPasswordFormik.errors.password ? (\r\n              <div style={{ color: \"red\" }}>{resetPasswordFormik.errors.password}</div>\r\n            ) : null}\r\n          </Box>\r\n          <Box sx={{ mb: { xs: 3, xl: 4 } }}>\r\n            <TextField\r\n              name=\"confirmPassword\"\r\n              fullWidth\r\n              type={showConfirmPassword}\r\n              placeholder=\"Retype Password\"\r\n              label=\"Retype Password\"\r\n              value={resetPasswordFormik.values.confirmPassword}\r\n              onChange={(e: any) => {\r\n                resetPasswordFormik.setFieldValue(\"confirmPassword\", e.target.value);\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton onClick={changeConfirmPasswordState} edge=\"end\">\r\n                      <Icon\r\n                       icon={showConfirmPassword == \"text\" ? \"eva:eye-fill\" : \"eva:eye-off-fill\"}\r\n                        // icon={showConfirmPassword ? \"eva:eye-fill\" : \"eye-off-fill\"}\r\n                      />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            {resetPasswordFormik.touched.confirmPassword && resetPasswordFormik.errors.confirmPassword ? (\r\n              <div style={{ color: \"red\" }}>{resetPasswordFormik.errors.confirmPassword}</div>\r\n            ) : null}\r\n          </Box>\r\n\r\n        \r\n\r\n          <div style={{ textAlign: \"center\", marginTop: \"30px\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              // disabled={isSubmitting}\r\n              sx={{\r\n                minWidth: 160,\r\n                fontWeight: Fonts.REGULAR,\r\n                fontSize: 16,\r\n                textTransform: \"capitalize\",\r\n                padding: \"4px 16px 8px\",\r\n              }}\r\n            >\r\n             Reset my password\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      \r\n        <AppInfoView />\r\n      </Box>\r\n    </AuthWrapper>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}